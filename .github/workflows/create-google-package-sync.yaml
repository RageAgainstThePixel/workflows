name: generate synced google package repository

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      create:
        description: 'Create repositories for all packages found in the archive'
        required: false
        default: true
        type: boolean
env:
  ARCHIVE: https://developers.google.com/unity/archive
concurrency: ${{ github.workflow }}
jobs:
  generate-synced-repository:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'schedule' || github.event.inputs.create == 'true' }}
    permissions:
      contents: write
    steps:
      - name: generate synced google package repository
        run: |
          set -e
          packages=$(curl -sS https://developers.google.com/unity/archive | grep -oP 'com.google.[a-z.-]*\d+\.\d+\.\d+\.tgz' | sed -r 's/-?[0-9]+\.[0-9]+\.[0-9]+\.tgz//g' | sort -u)
          echo $packages
          for package in $packages; do
            if gh repo view RageAgainstThePixel/$package >/dev/null 2>&1; then
              continue
            fi

            echo "Creating repository for $package"
            # Retry the operation up to 3 times
            success=false
            for attempt in {1..3}
            do
              output=$(gh repo create RageAgainstThePixel/$package --public --template RageAgainstThePixel/google-package-archive-template 2>&1)
              if [[ $output == *"HTTP 5"* ]]
              then
                echo $output
                echo "Server error, waiting before retrying..."
                sleep 10
              else
                echo "Repository created successfully @ https://github.com/RageAgainstThePixel/$package"
                success=true
                break
              fi
            done

            if [ "$success" = false ] ; then
              echo "::error:: Failed to create repository after 3 attempts."
              exit 1
            fi

            json_payload='{
              "has_issues": false,
              "has_wiki": false,
              "has_projects": false,
              "allow_rebase_merge": false,
              "allow_squash_merge": false,
              "allow_merge_commit": true,
              "delete_branch_on_merge": true,
              "description": "Wrapper over original package distribution. This repository replicates the licence terms of his original distribution location. For more information check https://firebase.google.com/terms and https://firebase.google.com/support/release-notes/unity",
              "homepage": "'"$ARCHIVE"'"
            }'

            curl -s -o /dev/null -w "%{http_code}\n" -X PATCH -H "Authorization: token $GH_TOKEN" \
            -d "$json_payload" \
            https://api.github.com/repos/RageAgainstThePixel/$package

            # Poll for the workflow file to be available
            for i in {1..10}
            do
              echo "Checking if workflow file is available ($i/10)..."
              if gh workflow view upm-sync.yaml -R RageAgainstThePixel/$package > /dev/null 2>&1
              then
                  echo "Workflow file is available, running workflow..."
                  gh workflow run upm-sync.yaml -R RageAgainstThePixel/$package
                  break
              else
                  echo "Workflow file is not available yet, waiting..."
                  sleep 10
              fi
            done
          done
        env:
          GH_TOKEN: ${{ secrets.CI_TOKEN }}
  delete-synced-repository:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.create == 'false' }}
    permissions:
      contents: write
    steps:
      - name: delete repositories found in the archive
        run: |
          set -e
          packages=$(curl -sS https://developers.google.com/unity/archive | grep -o 'com.google[^<]*' | cut -d'/' -f1 | grep -v '^com$' | sort -u)
          echo $packages
          for package in $packages; do
            if gh repo view RageAgainstThePixel/$package >/dev/null 2>&1; then
              echo "Deleting repository for $package"
              gh repo delete RageAgainstThePixel/$package --yes
            fi
          done
        env:
          GH_TOKEN: ${{ secrets.CI_TOKEN }}